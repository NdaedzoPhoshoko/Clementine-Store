Use this prompt to implement the same pagination logic and UX in another project:

- Implement a paginated product grid with a centered pagination bar identical to the following structure and behavior:
  
  - Data contract from the list API must include items and meta where meta = { page, limit, total, pages, hasNext, hasPrev } . If meta.pages is missing, derive it from Math.max(Math.ceil(total/limit), 1) .
  - Maintain local UI states: page , query , selectedCategoryId , minPrice , maxPrice , inStockOnly , sort , and itemsPerPage . Filters update data but should NOT force page back to 1.
  - Only when itemsPerPage changes (e.g., due to responsive layout), reset page to 1 to keep full rows consistent.
  - Pagination controls:
    - Previous ( ‹ ) and Next ( › ) are buttons with disabled styles when !hasPrev or !hasNext .
    - Show current page as a styled, non-clickable element with aria-current="page" .
    - Render up to three next pages: [page + 1..min(totalPages, page + 3)] .
    - If there is a gap after the last shown next page, show an ellipsis.
    - If the last page isn’t visible, show a jump button to totalPages .
    - Clicking any page button calls goToPage(n) with guard conditions:
      - Do nothing when n < 1 , n > totalPages , or n === page .
      - Otherwise setPage(n) .
    - Optional enhancement: when filters change and page > totalPages , clamp page to totalPages (do not reset to 1).
  - Accessibility:
    - Set aria-label on all buttons.
    - Add aria-disabled="true" when a button is disabled.
    - Add aria-current="page" to the active page element.
  - URL synchronization:
    - Keep URL in sync with state using query params: page , search , categoryId , minPrice , maxPrice , inStock , sort .
    - Use replace navigation to avoid polluting browser history when only filters/pagination change.
  - Visual design:
    - Center the pagination bar; use soft borders, neutral surface, muted text for ellipsis/hint, and a subtle active highlight for the current page.
    - Include hover states for interactive pagination pills, and an is-disabled style with reduced opacity and cursor: not-allowed .

    - - Accessibility:
  - Set aria-label on all buttons.
  - Add aria-disabled="true" when a button is disabled.
  - Add aria-current="page" to the active page element.
- URL synchronization:
  - Keep URL in sync with state using query params: page , search , categoryId , minPrice , maxPrice , inStock , sort .
  - Use replace navigation to avoid polluting browser history when only filters/pagination change.
- Visual design:
  - Center the pagination bar; use soft borders, neutral surface, muted text for ellipsis/hint, and a subtle active highlight for the current page.
  - Include hover states for interactive pagination pills, and an is-disabled style with reduced opacity and cursor: not-allowed .
- Reference implementation details (mirror these exactly):

- Derived pages:

const nextPages = useMemo(() => {
  const arr = [];
  for (let i = page + 1; i <= Math.min(totalPages, page + 3); i++) arr.push(i);
  return arr;
}, [page, totalPages]);
const lastIncluded = nextPages.length ? nextPages[nextPages.length - 1] : page;
const showEllipsis = lastIncluded < totalPages - 1;
const showLast = lastIncluded < totalPages;
const goToPage = (n) => {
  if (n < 1 || n > totalPages || n === page) return;
  setPage(n);
};

Markup skeleton:
<nav className="shop-pagination" aria-label="Pagination">
  <button
    className={`shop-pagination__btn ${!hasPrev ? "is-disabled" : ""}`}
    onClick={() => hasPrev && goToPage(page - 1)}
    aria-disabled={!hasPrev ? "true" : undefined}
    aria-label="Previous page"
  >
    ‹
  </button>
  <span className="shop-pagination__page is-active" aria-current="page">{page}</span>
  <button
    className={`shop-pagination__btn ${!hasNext ? "is-disabled" : ""}`}
    onClick={() => hasNext && goToPage(page + 1)}
    aria-disabled={!hasNext ? "true" : undefined}
    aria-label="Next page"
  >
    ›
  </button>
  {nextPages.map((p) => (
    <button
      key={`next-${p}`}
      className="shop-pagination__page"
      onClick={() => goToPage(p)}
      aria-label={`Go to page ${p}`}
    >
      {p}
    </button>
  ))}
  {showEllipsis && <span className="shop-pagination__ellipsis" aria-hidden="true">…</span>}
  {showLast && (
    <button
      className="shop-pagination__page"
      onClick={() => goToPage(totalPages)}
      aria-label={`Go to last page (${totalPages})`}
    >
      {totalPages}
    </button>
  )}
  <span className="shop-pagination__hint">select to navigate to a page</span>
</nav>

- - Styling guidelines (adapt tokens to your design system):
  - Base: center content, gap 8px , soft border-top .
  - Pills: min-width 36px , height 36px , rounded corners, subtle border, neutral background on normal, stronger highlight on active.
  - Hover: change background and border color subtly.
  - Disabled: opacity: 0.5 , cursor: not-allowed .
  - Ellipsis/hint: muted color, hide hint on small screens.
- Acceptance criteria:

- Filters change results without resetting page .
- Pagination never navigates out of bounds; previous/next correctly disable.
- Up to three upcoming pages show; ellipsis and last-page button render only when needed.
- URL reflects page and filters; reloading preserves state.
- Screen readers announce current page and button purpose; hint text is present and responsive.